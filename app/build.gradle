apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.tiensinoakuma.rikaipic"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 100
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {p
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
        }
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
    buildTypes {
        debug {
            buildConfigField "String", "GOOGLE_TRANSLATE_API_KEY", getProps('GOOGLE_TRANSLATE_API_KEY')
            buildConfigField "String", "PEXELS_API_KEY", getProps('PEXELS_API_KEY')
            buildConfigField "String", "GOOGLE_TRANSLATE_ENDPOINT", "\"https://translation.googleapis.com/\""
            buildConfigField "String", "WIKI_URL", "\"https://en.wiktionary.org/wiki/\""
            buildConfigField "String", "PEXELS_ENDPOINT", "\"https://api.pexels.com/\""
            buildConfigField "String", "DEFAULT_LANGUAGE", "\"en\""
        }
        release {
            buildConfigField "String", "GOOGLE_TRANSLATE_API_KEY", getProps('GOOGLE_TRANSLATE_API_KEY')
            buildConfigField "String", "PEXELS_API_KEY", getProps('PEXELS_API_KEY')
            buildConfigField "String", "GOOGLE_TRANSLATE_ENDPOINT", "\"https://translation.googleapis.com/\""
            buildConfigField "String", "WIKI_URL", "\"https://en.wiktionary.org/wiki/\""
            buildConfigField "String", "PEXELS_ENDPOINT", "\"https://api.pexels.com/\""
            buildConfigField "String", "DEFAULT_LANGUAGE", "\"en\""
        }
    }
    productFlavors {
    }
}

ext {
    dagger = "2.15"
    timber = "4.7.1"
    retrofit = "2.4.0"
    glide = "4.7.1"
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:support-annotations:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //Firebase ML-Kit
    implementation 'com.google.firebase:firebase-core:16.0.1'
    implementation 'com.google.firebase:firebase-ml-vision:16.0.0'
    implementation 'com.google.firebase:firebase-ml-vision-image-label-model:15.0.0'
    implementation 'com.google.firebase:firebase-ml-model-interpreter:16.0.0'
    //Dagger
    implementation "com.google.dagger:dagger:$dagger"
    implementation "com.google.dagger:dagger-android:$dagger"
    implementation "com.google.dagger:dagger-android-support:$dagger"
    kapt "com.google.dagger:dagger-compiler:$dagger"
    kapt "com.google.dagger:dagger-android-processor:$dagger"
    //Timber
    implementation "com.jakewharton.timber:timber:$timber"
    //RxJava2
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    //OkHttP
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    //Gson
    implementation 'com.google.code.gson:gson:2.8.2'
    //Glide
    implementation "com.github.bumptech.glide:glide:$glide"
    kapt "com.github.bumptech.glide:compiler:$glide"
}

def getProps(String propName) {
    def propsFile = rootProject.file('secrets.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return System.getenv(propName)
    }
}

apply plugin: 'com.google.gms.google-services'